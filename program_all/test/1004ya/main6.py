# -*- coding: utf-8 -*-
"""
Naviya 파서 최종판 (멀티스레드 10개 + 영업시간 신규 규칙 + 진행 인덱스 출력)
- SHOP_INTRO_NEW_ONE : clip_board_view의 모든 <p> 텍스트 배열 (빈 p는 "" 보존)
- SHOP_INTRO_NEW_TWO : 위 배열을 <br>로 이어 붙인 문자열
- SHOP_INTRO_NEW_THREE : NEW_TWO와 동일하되, '특수문자만 있고 한글이 전혀 없는 줄'은 '<br></br>'로 대체
- BUSINESS_HOUR :
    * p-태그만 보고 '영업시간' 헤더 이후 탐색
    * (오전|오후|낮|밤|새벽|저녁)+시각 토큰을 순서대로 수집해 '처음 2개'로 HH:MM ~ HH:MM
    * '24시간 영업' / '24시간' / '24시' / '연중무휴' → '00:00 ~ 24:00'
    * '~ 예약마감시 / 마감시(까지) / 종료' 등 끝마커가 있으면 끝시간 '03:00'
    * '오시는길/공지/공지안내/공지사항' 만나면 탐색 중단
- PROGRAM : 한 줄에 '분'과 '만' 동시 포함된 줄만 파싱
    * 제목 없으면 A코스, 시간 없으면 60분, 여러 가격이면 마지막(할인가), 타이틀당 대표 1개
- CSV(result.csv): SHOP_ID, BUSINESS_HOUR, CLOSED_DAY('연중무휴(전화문의)'), PROGRAM(JSON),
                   SHOP_INTRO_NEW_ONE(JSON), SHOP_INTRO_NEW_TWO, SHOP_INTRO_NEW_THREE
- 멀티스레드 10개 동시 크롤링
- 작업 완료될 때마다 진행 인덱스 출력: [done] i/N : N_wrid
"""

import re
import json
import csv
import time
import threading
from typing import List, Dict, Optional, Tuple

import requests
from requests.adapters import HTTPAdapter
from bs4 import BeautifulSoup
from concurrent.futures import ThreadPoolExecutor, as_completed

# ======================= 설정 =======================
BASE_URL = "https://www.naviya.net/bbs/board.php?bo_table=b49&wr_id={wr_id}"

WR_ID_LIST = ["10218",
              "11314",
              "11835",
              "12234",
              "12500",
              "13422",
              "13944",
              "14043",
              "14053",
              "14653",
              "14754",
              "14871",
              "15130",
              "15213",
              "15427",
              "15585",
              "16602",
              "16780",
              "17128",
              "17681",
              "18301",
              "18358",
              "18441",
              "18462",
              "18675",
              "18744",
              "18943",
              "19071",
              "19369",
              "19550",
              "19648",
              "19802",
              "20029",
              "20074",
              "20092",
              "20139",
              "20520",
              "20765",
              "20865",
              "21008",
              "21023",
              "21228",
              "21231",
              "21324",
              "21442",
              "21523",
              "21610",
              "21678",
              "21689",
              "21907",
              "21915",
              "22012",
              "22054",
              "22147",
              "22218",
              "22249",
              "22278",
              "22361",
              "22396",
              "22538",
              "22653",
              "22707",
              "22710",
              "22719",
              "22735",
              "22873",
              "22966",
              "23101",
              "23232",
              "23259",
              "23273",
              "23328",
              "23341",
              "23423",
              "23440",
              "23557",
              "23593",
              "23674",
              "23748",
              "23841",
              "23885",
              "23980",
              "23981",
              "24050",
              "24110",
              "24158",
              "24242",
              "24252",
              "24327",
              "24383",
              "24390",
              "24419",
              "24434",
              "24468",
              "24483",
              "24498",
              "24530",
              "24553",
              "24576",
              "24578",
              "24587",
              "24615",
              "24616",
              "24656",
              "24659",
              "24755",
              "24766",
              "24803",
              "24813",
              "24819",
              "24829",
              "24835",
              "24851",
              "24857",
              "24868",
              "24869",
              "24872",
              "24875",
              "24884",
              "24889",
              "24922",
              "24927",
              "24928",
              "24933",
              "24935",
              "24948",
              "24979",
              "24989",
              "24991",
              "24992",
              "24996",
              "25013",
              "25014",
              "25077",
              "25080",
              "25089",
              "25108",
              "25123",
              "25125",
              "25138",
              "25139",
              "25191",
              "25196",
              "25202",
              "25207",
              "25229",
              "25230",
              "25238",
              "25275",
              "25329",
              "25348",
              "25373",
              "25375",
              "25450",
              "25621",
              "25625",
              "25629",
              "25715",
              "25730",
              "25758",
              "25982",
              "26005",
              "26011",
              "26023",
              "26029",
              "26070",
              "26117",
              "26192",
              "26204",
              "26214",
              "26218",
              "26275",
              "26289",
              "26309",
              "26318",
              "26414",
              "26429",
              "26454",
              "26525",
              "26544",
              "26597",
              "26723",
              "26734",
              "26761",
              "26801",
              "26831",
              "27033",
              "27119",
              "27123",
              "27222",
              "27314",
              "27345",
              "27355",
              "27503",
              "27509",
              "27594",
              "27601",
              "27704",
              "27747",
              "27759",
              "27814",
              "27875",
              "27905",
              "27952",
              "28028",
              "28040",
              "28041",
              "28047",
              "28153",
              "28158",
              "28208",
              "28220",
              "28300",
              "28363",
              "28443",
              "28444",
              "28502",
              "28516",
              "28540",
              "28555",
              "28592",
              "28706",
              "28715",
              "28757",
              "28779",
              "28806",
              "28843",
              "28897",
              "28927",
              "28934",
              "28936",
              "28969",
              "28986",
              "28993",
              "29018",
              "29099",
              "29160",
              "29271",
              "29346",
              "29348",
              "29380",
              "29401",
              "29486",
              "29531",
              "29633",
              "29636",
              "29657",
              "29741",
              "29787",
              "29797",
              "29912",
              "29919",
              "29994",
              "30023",
              "30033",
              "30059",
              "30090",
              "30092",
              "30140",
              "30178",
              "30205",
              "30213",
              "30226",
              "30243",
              "30246",
              "30264",
              "30268",
              "30269",
              "30310",
              "30313",
              "30358",
              "30383",
              "30526",
              "30555",
              "30639",
              "30641",
              "30670",
              "30711",
              "30744",
              "30889",
              "30890",
              "30902",
              "30919",
              "30923",
              "30947",
              "30953",
              "31004",
              "31026",
              "31049",
              "31055",
              "31094",
              "31103",
              "31158",
              "31163",
              "31201",
              "31219",
              "31251",
              "31268",
              "31303",
              "31341",
              "31361",
              "31362",
              "31432",
              "31491",
              "31499",
              "31501",
              "31509",
              "31512",
              "31513",
              "31531",
              "31532",
              "31579",
              "31598",
              "31623",
              "31647",
              "31659",
              "31679",
              "31732",
              "31750",
              "31758",
              "31776",
              "31834",
              "31904",
              "31930",
              "31967",
              "31983",
              "31985",
              "32005",
              "32006",
              "32008",
              "32009",
              "32030",
              "32090",
              "32092",
              "32120",
              "32133",
              "32137",
              "32139",
              "32144",
              "32177",
              "32179",
              "32180",
              "32212",
              "32213",
              "32255",
              "32261",
              "32281",
              "32323",
              "32333",
              "32356",
              "32370",
              "32371",
              "32372",
              "32419",
              "32421",
              "32519",
              "32534",
              "32545",
              "32569",
              "32570",
              "32573",
              "32599",
              "32612",
              "32615",
              "32623",
              "32624",
              "32678",
              "32695",
              "32715",
              "32718",
              "32723",
              "32741",
              "32757",
              "32758",
              "32806",
              "32813",
              "32815",
              "32819",
              "32843",
              "32858",
              "32874",
              "32876",
              "32888",
              "32941",
              "33044",
              "33090",
              "33124",
              "33183",
              "33199",
              "33289",
              "33380",
              "33381",
              "33382",
              "33393",
              "33407",
              "33425",
              "33443",
              "33473",
              "33594",
              "33617",
              "33627",
              "33653",
              "33654",
              "33733",
              "33793",
              "33810",
              "33821",
              "33831",
              "33886",
              "33970",
              "33990",
              "34040",
              "34058",
              "34059",
              "34173",
              "34194",
              "34216",
              "34365",
              "34403",
              "34570",
              "34591",
              "34639",
              "34647",
              "34655",
              "34666",
              "34671",
              "34712",
              "34794",
              "34871",
              "34885",
              "34906",
              "34953",
              "34969",
              "35077",
              "35079",
              "35105",
              "35159",
              "35171",
              "35256",
              "35265",
              "35266",
              "35301",
              "35315",
              "35397",
              "35445",
              "35507",
              "35611",
              "35616",
              "35649",
              "35661",
              "35662",
              "35693",
              "35717",
              "35728",
              "35751",
              "35779",
              "35780",
              "35781",
              "3581",
              "35862",
              "35904",
              "35943",
              "35954",
              "35972",
              "36024",
              "36029",
              "36034",
              "36042",
              "36056",
              "36061",
              "36082",
              "36129",
              "36158",
              "36164",
              "36165",
              "36200",
              "36265",
              "36276",
              "36341",
              "36342",
              "36344",
              "36358",
              "36396",
              "3641",
              "36473",
              "36523",
              "36530",
              "36553",
              "36613",
              "36675",
              "36690",
              "36771",
              "36779",
              "36781",
              "36812",
              "36870",
              "36937",
              "36943",
              "36974",
              "37014",
              "37020",
              "37206",
              "37245",
              "37248",
              "37314",
              "37329",
              "37331",
              "37334",
              "37371",
              "37394",
              "37429",
              "37496",
              "37499",
              "37527",
              "37532",
              "37560",
              "37603",
              "37742",
              "37756",
              "37781",
              "37801",
              "37838",
              "37865",
              "37867",
              "37868",
              "37883",
              "37885",
              "37886",
              "37922",
              "37953",
              "38013",
              "38031",
              "38051",
              "38128",
              "38145",
              "38152",
              "38223",
              "38226",
              "38273",
              "38321",
              "38363",
              "38397",
              "38414",
              "38449",
              "38451",
              "38487",
              "38495",
              "38498",
              "38499",
              "38504",
              "38638",
              "38686",
              "38790",
              "38792",
              "38800",
              "38823",
              "38887",
              "38940",
              "38941",
              "38949",
              "38985",
              "39009",
              "39022",
              "39036",
              "39069",
              "39130",
              "39174",
              "39259",
              "39261",
              "39303",
              "39310",
              "39394",
              "39400",
              "39420",
              "39495",
              "39505",
              "39518",
              "39520",
              "39531",
              "39613",
              "39616",
              "39631",
              "39765",
              "39808",
              "39822",
              "40085",
              "40157",
              "40163",
              "40264",
              "40310",
              "40357",
              "40385",
              "40402",
              "40467",
              "40477",
              "40515",
              "40522",
              "40541",
              "40546",
              "40549",
              "40550",
              "40551",
              "40556",
              "40662",
              "40688",
              "40711",
              "40729",
              "40732",
              "40746",
              "40762",
              "40775",
              "40795",
              "40809",
              "40817",
              "40901",
              "40911",
              "40924",
              "40948",
              "40949",
              "41010",
              "41011",
              "41024",
              "41031",
              "41054",
              "41072",
              "41112",
              "41152",
              "41173",
              "41174",
              "41179",
              "41216",
              "41244",
              "41273",
              "41380",
              "41439",
              "41454",
              "41505",
              "41518",
              "41523",
              "41526",
              "41534",
              "41537",
              "41539",
              "41545",
              "41546",
              "41547",
              "41549",
              "41550",
              "41552",
              "41566",
              "41567",
              "41571",
              "41572",
              "41573",
              "41625",
              "41640",
              "41645",
              "41646",
              "41647",
              "41648",
              "41661",
              "41665",
              "41667",
              "41672",
              "41689",
              "41703",
              "41711",
              "41718",
              "41726",
              "41734",
              "41735",
              "41764",
              "41765",
              "41770",
              "41777",
              "41780",
              "41786",
              "41830",
              "41843",
              "41846",
              "41869",
              "41870",
              "41872",
              "41879",
              "41884",
              "41885",
              "41894",
              "41895",
              "41898",
              "41899",
              "41900",
              "41901",
              "41905",
              "41910",
              "41918",
              "41938",
              "41939",
              "41940",
              "41942",
              "41947",
              "41948",
              "41949",
              "41950",
              "41964",
              "41966",
              "41967",
              "41968",
              "41995",
              "41996",
              "42029",
              "42031",
              "42032",
              "42062",
              "42063",
              "42092",
              "42101",
              "42126",
              "42141",
              "42144",
              "42145",
              "42165",
              "42166",
              "42167",
              "42168",
              "42179",
              "42194",
              "42196",
              "42197",
              "42218",
              "42221",
              "42222",
              "42224",
              "42232",
              "42243",
              "42244",
              "42252",
              "42271",
              "42283",
              "42284",
              "42325",
              "42342",
              "42351",
              "42358",
              "42475",
              "42477",
              "42485",
              "42542",
              "42544",
              "42545",
              "42546",
              "42559",
              "42564",
              "42581",
              "42583",
              "42594",
              "42612",
              "42613",
              "42642",
              "42643",
              "42660",
              "42665",
              "42667",
              "42685",
              "42687",
              "42688",
              "42706",
              "42713",
              "42744",
              "42755",
              "42756",
              "42794",
              "42807",
              "42811",
              "42819",
              "42828",
              "42829",
              "42830",
              "42836",
              "42856",
              "42919",
              "42940",
              "42967",
              "43003",
              "43013",
              "43022",
              "43023",
              "43038",
              "43039",
              "43079",
              "43083",
              "43092",
              "43093",
              "43110",
              "43111",
              "43116",
              "43119",
              "43127",
              "43140",
              "43148",
              "43150",
              "43151",
              "43152",
              "43196",
              "43206",
              "43220",
              "43221",
              "43227",
              "43237",
              "43239",
              "43255",
              "43256",
              "43261",
              "43263",
              "43271",
              "43274",
              "43277",
              "43299",
              "43339",
              "43346",
              "43356",
              "43369",
              "43423",
              "43436",
              "43440",
              "43441",
              "43454",
              "43462",
              "43475",
              "43476",
              "43477",
              "43497",
              "43514",
              "43517",
              "43538",
              "43540",
              "43542",
              "43544",
              "43557",
              "43559",
              "43565",
              "43589",
              "43614",
              "43632",
              "43670",
              "43682",
              "43684",
              "43685",
              "43692",
              "43698",
              "43754",
              "43780",
              "43782",
              "43784",
              "43788",
              "43803",
              "43815",
              "43820",
              "43824",
              "43841",
              "43846",
              "43847",
              "43858",
              "43868",
              "43894",
              "43927",
              "43932",
              "43934",
              "43959",
              "43960",
              "43962",
              "43967",
              "43971",
              "43973",
              "43978",
              "43981",
              "43983",
              "43986",
              "43987",
              "43992",
              "44008",
              "44013",
              "44076",
              "44103",
              "44110",
              "44160",
              "44175",
              "44177",
              "44178",
              "44191",
              "44238",
              "44256",
              "44279",
              "44310",
              "44370",
              "44372",
              "44373",
              "44383",
              "44391",
              "44392",
              "44393",
              "44396",
              "44423",
              "44428",
              "44440",
              "44481",
              "44490",
              "44501",
              "44503",
              "44504",
              "44505",
              "44506",
              "44538",
              "44552",
              "44561",
              "44573",
              "44575",
              "44620",
              "44621",
              "44638",
              "44639",
              "44667",
              "44673",
              "44674",
              "44686",
              "44698",
              "44709",
              "44738",
              "44762",
              "44768",
              "44782",
              "44792",
              "44808",
              "44816",
              "44817",
              "44866",
              "44871",
              "44872",
              "44880",
              "44883",
              "44893",
              "44899",
              "44902",
              "44909",
              "44910",
              "44911",
              "44920",
              "44926",
              "44951",
              "44971",
              "44986",
              "44997",
              "45000",
              "45015",
              "45024",
              "45025",
              "45078",
              "45083",
              "45090",
              "45091",
              "45101",
              "45109",
              "45110",
              "45144",
              "45181",
              "45182",
              "45204",
              "45220",
              "45224",
              "45232",
              "45234",
              "45235",
              "45253",
              "45254",
              "45264",
              "45265",
              "45270",
              "45290",
              "45348",
              "45379",
              "45392",
              "45422",
              "45447",
              "45449",
              "45458",
              "45469",
              "45473",
              "45503",
              "45509",
              "45514",
              "45528",
              "45538",
              "45541",
              "45553",
              "45559",
              "45560",
              "45563",
              "45583",
              "45589",
              "45599",
              "45602",
              "45607",
              "45617",
              "45618",
              "45619",
              "45671",
              "45674",
              "45703",
              "45704",
              "45709",
              "45727",
              "45738",
              "45745",
              "45761",
              "45771",
              "45783",
              "45793",
              "45794",
              "45796",
              "45824",
              "45845",
              "45852",
              "45856",
              "45858",
              "45929",
              "45932",
              "45933",
              "45954",
              "45955",
              "45961",
              "45967",
              "45976",
              "45980",
              "45986",
              "46033",
              "46034",
              "46035",
              "46036",
              "46041",
              "46047",
              "46067",
              "46068",
              "46082",
              "46084",
              "46085",
              "46104",
              "46107",
              "46150",
              "46151",
              "46156",
              "46168",
              "46172",
              "46182",
              "46183",
              "46191",
              "46192",
              "46206",
              "46210",
              "46213",
              "46221",
              "46225",
              "46232",
              "46237",
              "46300",
              "46341",
              "46360",
              "46361",
              "46377",
              "46411",
              "46412",
              "46418",
              "46431",
              "46434",
              "46435",
              "46448",
              "46492",
              "46493",
              "46494",
              "46520",
              "46531",
              "46542",
              "46556",
              "46560",
              "46561",
              "46592",
              "46593",
              "46608",
              "46615",
              "46639",
              "46640",
              "46641",
              "46655",
              "46656",
              "46658",
              "46662",
              "46722",
              "46725",
              "46734",
              "46751",
              "46752",
              "46762",
              "46783",
              "46784",
              "46790",
              "46792",
              "46793",
              "46794",
              "46799",
              "46813",
              "46857",
              "46858",
              "46867",
              "46885",
              "46886",
              "46888",
              "46895",
              "46896",
              "46897",
              "46919",
              "46922",
              "46923",
              "46924",
              "46925",
              "46940",
              "46951",
              "46962",
              "46989",
              "47013",
              "47015",
              "47019",
              "47026",
              "47044",
              "47051",
              "47070",
              "47122",
              "47136",
              "47137",
              "47138",
              "47151",
              "47152",
              "47160",
              "47181",
              "47216",
              "47217",
              "47265",
              "47276",
              "47278",
              "47305",
              "47326",
              "47330",
              "47335",
              "47337",
              "47338",
              "47361",
              "47363",
              "47367",
              "47380",
              "47381",
              "47418",
              "47421",
              "47429",
              "47431",
              "47446",
              "47453",
              "47478",
              "47489",
              "47501",
              "47508",
              "47513",
              "47514",
              "47520",
              "47534",
              "47557",
              "47568",
              "47587",
              "47632",
              "47644",
              "47647",
              "47675",
              "47678",
              "47687",
              "47688",
              "47689",
              "47692",
              "47702",
              "47712",
              "47713",
              "47745",
              "47762",
              "47767",
              "47768",
              "47789",
              "47790",
              "47795",
              "47798",
              "47814",
              "47815",
              "47828",
              "47830",
              "47833",
              "47840",
              "47881",
              "47882",
              "47903",
              "47905",
              "47906",
              "47908",
              "47931",
              "47939",
              "47940",
              "47942",
              "48004",
              "48006",
              "48023",
              "48026",
              "48027",
              "48031",
              "48036",
              "48039",
              "48040",
              "48041",
              "48050",
              "48056",
              "48068",
              "48069",
              "48072",
              "48075",
              "48084",
              "48118",
              "48128",
              "48134",
              "48138",
              "48142",
              "48145",
              "48146",
              "48149",
              "48163",
              "48164",
              "48168",
              "48170",
              "48171",
              "48176",
              "48180",
              "48248",
              "48249",
              "48256",
              "48258",
              "48269",
              "48271",
              "48277",
              "48286",
              "48293",
              "48299",
              "48311",
              "48314",
              "48332",
              "48364",
              "48378",
              "48381",
              "48393",
              "48394",
              "48404",
              "48414",
              "48415",
              "48416",
              "48418",
              "48430",
              "48431",
              "48469",
              "48473",
              "48475",
              "48502",
              "48508",
              "48509",
              "48523",
              "48524",
              "48527",
              "48528",
              "48530",
              "48532",
              "48534",
              "48537",
              "48539",
              "48579",
              "48583",
              "48587",
              "48588",
              "48597",
              "48613",
              "48626",
              "48635",
              "48637",
              "48639",
              "48643",
              "48644",
              "48648",
              "48656",
              "48657",
              "48658",
              "48659",
              "48711",
              "48722",
              "48723",
              "48727",
              "48729",
              "48733",
              "48737",
              "48738",
              "48747",
              "48748",
              "48749",
              "48758",
              "48761",
              "48762",
              "48763",
              "48768",
              "48769",
              "48770",
              "48803",
              "48804",
              "48818",
              "48822",
              "48839",
              "48853",
              "48859",
              "48865",
              "48868",
              "48869",
              "48870",
              "48898",
              "48911",
              "48913",
              "48927",
              "48932",
              "48937",
              "48945",
              "48947",
              "48950",
              "48953",
              "48957",
              "48961",
              "48988",
              "49007",
              "49008",
              "49009",
              "49012",
              "49020",
              "49024",
              "49025",
              "49026",
              "49028",
              "49054",
              "49055",
              "49066",
              "49074",
              "49075",
              "49104",
              "49116",
              "49118",
              "49142",
              "49143",
              "49154",
              "49167",
              "49172",
              "49175",
              "49176",
              "49181",
              "5718",
              "8554",
              "8935"]


HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/120 Safari/537.36",
    "Accept-Language": "ko,en;q=0.8",
    "Referer": "https://www.naviya.net/",
}

REQUEST_TIMEOUT = 12
RESULT_CSV = "result.csv"
MAX_WORKERS = 10           # 동시 스레드 수
PRICE_PICK = "last"        # "last"=할인가, "first"=첫 가격

# ======================= 세션(스레드 로컬) =======================
_thread_local = threading.local()

def get_session() -> requests.Session:
    """스레드별 requests.Session (커넥션 풀)"""
    sess = getattr(_thread_local, "session", None)
    if sess is None:
        sess = requests.Session()
        adapter = HTTPAdapter(pool_connections=MAX_WORKERS * 2, pool_maxsize=MAX_WORKERS * 2)
        sess.mount("http://", adapter)
        sess.mount("https://", adapter)
        _thread_local.session = sess
    return sess

# ============== 공통 정규화 유틸 ==============
# 주의: ~ 는 절대 제거하지 않음 (시간 구분자로 사용)
ARROWS_RE   = re.compile(r"[➙➛➝➞➟➠➢➣➤➥➦➧➨➳➵➸→⇒⟶⟹⟿➔➚➘➙➼➽➷➺➻]+")
# []는 [A] 인식에 필요. ~ 도 유지.
DECOR_RE    = re.compile(r"[✿✻❥❖✣✱❉•·｡☾☽_=·\—–│┃▭■◆●▶▷◀◁❖❁❀★☆♡♥◆◇■□〈〉“”\"'`、·…·°•˚•🄌ⓐⓑⓒⓥ•➖╳×]+")
DASHES_RE   = re.compile(r"[|｜\- -—─━＿_]+")
DUPSPACE_RE = re.compile(r"\s{2,}")

def _unify_tilde(s: str) -> str:
    return s.replace("∼", "~").replace("〜", "~")

def normalize_line(s: str) -> str:
    """프로그램/영업시간 라인 파싱용(장식 제거)"""
    if not s:
        return ""
    t = _unify_tilde(s)
    t = (t.replace("\xa0", " ")
         .replace("\u200b", "")
         .replace("\u200c", "")
         .replace("\u200d", "")
         .replace("\u2060", "")
         .strip())
    # ~ 는 유지
    t = ARROWS_RE.sub(" ", t)
    t = DECOR_RE.sub(" ", t)
    t = DASHES_RE.sub(" ", t)
    # "0 60분" → "060분"
    t = re.sub(r"(\d)\s+(\d)", r"\1\2", t)
    t = DUPSPACE_RE.sub(" ", t).strip()
    return t

def compact(s: str) -> str:
    """공백 제거 비교용"""
    return re.sub(r"\s+", "", s or "")

# ============== HTML ==============
def fetch_html(wr_id: str) -> Optional[str]:
    url = BASE_URL.format(wr_id=wr_id)
    try:
        sess = get_session()
        r = sess.get(url, headers=HEADERS, timeout=REQUEST_TIMEOUT)
        r.raise_for_status()
        if not r.encoding or r.encoding.lower() == "iso-8859-1":
            r.encoding = r.apparent_encoding or "utf-8"
        return r.text
    except Exception as e:
        print(f"[warn] 요청 실패 wr_id={wr_id}: {e}")
        return None

def get_clip_root(html: str) -> Optional[BeautifulSoup]:
    soup = BeautifulSoup(html, "html.parser")
    return soup.select_one("#clip_board_view")

# ============== SHOP_INTRO (p 배열/문자열) ==============
def p_text_array(root: BeautifulSoup) -> List[str]:
    """
    모든 p 태그의 '보이는 텍스트'를 배열로.
    - strip=True로 양끝 공백 제거 → 공백 p는 ""로 들어감
    - NBSP/제로폭문자는 제거, 나머지 특수문자는 보존
    """
    arr: List[str] = []
    for p in root.find_all("p"):
        raw = p.get_text(separator=" ", strip=True)
        if raw is None:
            arr.append("")
            continue
        t = (raw.replace("\xa0", " ")
             .replace("\u200b", "")
             .replace("\u200c", "")
             .replace("\u200d", "")
             .replace("\u2060", ""))
        arr.append(t)
    return arr

def intro_two_from_array(intros: List[str]) -> str:
    """배열을 '<br>'로 이어 단일 문자열 생성(빈 요소도 유지)."""
    return "<br>".join(intros)

# NEW_THREE: 특수문자만 있는 줄(한글 없음)은 '<br></br>'로 대체
HANGUL_RE = re.compile(r"[가-힣]")
ALNUM_RE  = re.compile(r"[A-Za-z0-9]")

def is_decorative_only_no_hangul(s: str) -> bool:
    """한글이 1자도 없고, 공백 제외 나머지가 기호뿐인 줄인지 판별."""
    if not s:
        return False
    if HANGUL_RE.search(s):
        return False
    t = re.sub(r"\s+", "", s)
    if not t:
        return False
    if ALNUM_RE.search(t):  # 영문/숫자 포함 시 장식줄 아님
        return False
    return True

def intro_three_from_array(intros: List[str]) -> str:
    """
    NEW_TWO와 동일하게 '<br>'로 이어 붙이되,
    '특수문자만 있고 한글이 전혀 없는 줄'은 '<br></br>'로 대체.
    """
    processed = []
    for s in intros:
        if is_decorative_only_no_hangul(s):
            processed.append("<br></br>")
        else:
            processed.append(s)
    return "<br>".join(processed)

# ============== 영업시간 (p 전용, 첫 2토큰) ==============
# '저녁' 추가
STRICT_TIME_TOKEN_RE = re.compile(r"(오전|오후|낮|밤|새벽|저녁)\s*(\d{1,2})(?:\s*[:시]\s*(\d{1,2}))?")

def _fmt_hm(h: int, m: int) -> str:
    return f"{h:02d}:{m:02d}"

def _kor_time_to_24h(period: Optional[str], hour: int, minute: int = 0) -> Tuple[int, int]:
    """
    한글 시각 → 24시간제
    - 오전: 12→0
    - 오후/저녁: 1~11→+12, 12→12
    - 낮 : 1~6→+12, 12→12
    - 밤 : 12→0, 1~6→그대로, 7~11→+12
    - 새벽: 12→0, 1~11→그대로
    """
    p = (period or "").strip()
    h = max(0, min(24, hour))
    m = 0 if minute is None else max(0, min(59, minute))

    if p == "오전":
        if h == 12: h = 0
    elif p in ("오후", "저녁"):
        if h != 12: h += 12
    elif p == "낮":
        if h == 12: h = 12
        elif 1 <= h <= 6: h += 12
    elif p == "밤":
        if h == 12: h = 0
        elif 1 <= h <= 6: h = h
        else: h += 12
    elif p == "새벽":
        if h == 12: h = 0

    return max(0, min(24, h)), m

def is_24h_line(line: str) -> bool:
    """'24시간 영업', '24시간', '24시', '연중무휴' 포함 시 24시간으로 간주."""
    c = compact(line)
    return ("24시간영업" in c) or ("24시간" in c) or ("24시" in c) or ("연중무휴" in c)

# '예약마감시/마감시(까지)/종료' 등 끝마커 → 03:00
END_MARK_RE = re.compile(r"(예약)?마감(?:시|까지)?|종료")

def is_end_marker(line: str) -> bool:
    return bool(END_MARK_RE.search(compact(line)))

def extract_business_hours_p_only(root: BeautifulSoup) -> Optional[str]:
    """
    p 태그만 보고:
      - '영업시간' 헤더 이후
      - (오전|오후|낮|밤|새벽|저녁)+시각 토큰을 문서 순서대로 수집
      - 처음 2개 토큰으로 'HH:MM ~ HH:MM' 반환
      - 24시간 계열은 즉시 '00:00 ~ 24:00'
      - '~ 예약마감시 / 마감시(까지) / 종료' 포함 시 끝시간 03:00
      - '오시는길/공지/공지안내/공지사항' 만나면 탐색 중단
    """
    if not root:
        return None

    seen_hours = False
    times: List[Tuple[int, int]] = []

    for p in root.find_all("p"):
        raw = p.get_text(separator=" ", strip=True)
        if raw is None:
            continue
        line = normalize_line(raw)
        c = compact(line)

        if not seen_hours:
            if "영업시간" in c:
                seen_hours = True
            else:
                continue

        if any(key in c for key in ("오시는길", "공지안내", "공지사항", "공지")):
            break

        if is_24h_line(line):
            return "00:00 ~ 24:00"

        # 시작~끝 같은 줄에 끝마커 포함 (예: '오전 8시 ~ 예약마감시')
        if "~" in line and is_end_marker(line):
            m = STRICT_TIME_TOKEN_RE.search(line)  # 시작 토큰 1개만 필요
            if m:
                h, mi = _kor_time_to_24h(m.group(1), int(m.group(2)), int(m.group(3) or 0))
                return f"{h:02d}:{mi:02d} ~ 03:00"

        # 일반 토큰 수집
        for m in STRICT_TIME_TOKEN_RE.finditer(line):
            h, mi = _kor_time_to_24h(m.group(1), int(m.group(2)), int(m.group(3) or 0))
            times.append((h, mi))
            if len(times) >= 2:
                return f"{times[0][0]:02d}:{times[0][1]:02d} ~ {times[1][0]:02d}:{times[1][1]:02d}"

        # 줄이 따로 분리된 경우: 시작만 있고 뒤줄에 '마감/종료'만 있는 케이스
        if len(times) == 1 and is_end_marker(line):
            return f"{times[0][0]:02d}:{times[0][1]:02d} ~ 03:00"

    return None

# ============== PROGRAM 파싱 (라인 기반) ==============
def extract_prices(line: str) -> List[int]:
    nums = re.findall(r"(\d{1,3})\s*만", line)
    return [int(n) * 10000 for n in nums] if nums else []

def extract_duration(line: str) -> Optional[str]:
    cands = re.findall(r"(\d{1,3})\s*분", line)
    if not cands:
        return None
    return f"{int(cands[-1])}분"  # 마지막 '분'을 시간으로

def ensure_duration(line: str) -> str:
    d = extract_duration(line)
    return d if d else "60분"

def _ensure_kose(name: str) -> str:
    return name if name.endswith("코스") else f"{name}코스"

def extract_title(line: str) -> Optional[str]:
    # VIP / V
    if re.search(r"\bVIP\b", line, re.I) or re.search(r"\bV\b", line):
        return "VIP코스"
    # [A]
    m = re.search(r"\[\s*([A-Da-d])\s*\]", line)
    if m:
        return f"{m.group(1).upper()}코스"
    # A. / A:
    m = re.search(r"\b([A-Da-d])\s*[.:]", line)
    if m:
        return f"{m.group(1).upper()}코스"
    # A-1
    m = re.search(r"\b([A-Da-d])\s*-\s*\d+\b", line)
    if m:
        return f"{m.group(1).upper()}코스"
    # A 코스 / A코스
    m = re.search(r"\b([A-Da-d])\s*코\s*스\b", line)
    if m:
        return f"{m.group(1).upper()}코스"
    # 일반명 코스 (단일코스, 패키지1 등)
    m = re.search(r"([A-Za-z가-힣0-9]+)\s*코\s*스\b", line)
    if m:
        name = m.group(1).strip()
        if len(name) == 1 and name.isalpha():
            return f"{name.upper()}코스"
        return _ensure_kose(name)
    # duration 앞의 텍스트를 제목으로
    d = re.search(r"\d{1,3}\s*분", line)
    if d:
        prefix = line[:d.start()].strip()
        prefix = re.sub(r"^[\(\[]|[\)\]]$", "", prefix).strip()
        if prefix and prefix not in ("주", "야", "상담가능"):
            return _ensure_kose(prefix) if not prefix.endswith("코스") else prefix
    return None

def decide_title(line: str) -> str:
    t = extract_title(line)
    return t if t else "A코스"

def is_price_line(line: str) -> bool:
    return bool(re.search(r"\d{1,3}\s*만", line))

def html_to_lines_for_program(root: BeautifulSoup) -> List[str]:
    """프로그램 파싱용 라인 배열 (#clip_board_view 전체 텍스트를 줄 단위로)"""
    text_block = root.get_text("\n", strip=True)
    raw_lines = text_block.split("\n")
    lines = [normalize_line(ln) for ln in raw_lines if ln is not None]
    return [ln for ln in lines if ln]

def extract_program_items(root: BeautifulSoup) -> List[Dict]:
    lines = html_to_lines_for_program(root)
    results: List[Dict] = []
    taken = set()
    for line in lines:
        if not is_price_line(line):
            continue
        prices = extract_prices(line)
        if not prices:
            continue
        price = prices[-1] if PRICE_PICK == "last" else prices[0]
        title    = decide_title(line)
        duration = ensure_duration(line)
        if title in taken:
            continue
        results.append({
            "title": title,
            "duration": duration,
            "categories": "",
            "original_price": "",
            "discount_price": price,
        })
        taken.add(title)
    return results

# ============== CSV 저장 ==============
def save_to_csv(rows: List[Dict], path: str = RESULT_CSV):
    """
    rows: [{
        SHOP_ID, BUSINESS_HOUR, CLOSED_DAY,
        PROGRAM(list), SHOP_INTRO_NEW_ONE(list),
        SHOP_INTRO_NEW_TWO(str), SHOP_INTRO_NEW_THREE(str)
    }, ...]
    PROGRAM / SHOP_INTRO_NEW_ONE 은 JSON 문자열로 직렬화해서 저장
    """
    fieldnames = [
        "SHOP_ID", "BUSINESS_HOUR", "CLOSED_DAY",
        "PROGRAM", "SHOP_INTRO_NEW_ONE",
        "SHOP_INTRO_NEW_TWO", "SHOP_INTRO_NEW_THREE"
    ]
    with open(path, "w", encoding="utf-8-sig", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        for r in rows:
            writer.writerow({
                "SHOP_ID": r.get("SHOP_ID", ""),
                "BUSINESS_HOUR": r.get("BUSINESS_HOUR", ""),
                "CLOSED_DAY": r.get("CLOSED_DAY", ""),
                "PROGRAM": json.dumps(r.get("PROGRAM", []), ensure_ascii=False),
                "SHOP_INTRO_NEW_ONE": json.dumps(r.get("SHOP_INTRO_NEW_ONE", []), ensure_ascii=False),
                "SHOP_INTRO_NEW_TWO": r.get("SHOP_INTRO_NEW_TWO", ""),
                "SHOP_INTRO_NEW_THREE": r.get("SHOP_INTRO_NEW_THREE", ""),
            })

# ============== 개별 작업 단위 (스레드에서 실행) ==============
def process_wr_id(wr_id: str) -> Dict:
    html = fetch_html(wr_id)
    if not html:
        return {
            "SHOP_ID": f"N_{wr_id}",
            "BUSINESS_HOUR": "",
            "CLOSED_DAY": "연중무휴(전화문의)",
            "PROGRAM": [],
            "SHOP_INTRO_NEW_ONE": [],
            "SHOP_INTRO_NEW_TWO": "",
            "SHOP_INTRO_NEW_THREE": "",
        }

    root = get_clip_root(html)
    if not root:
        return {
            "SHOP_ID": f"N_{wr_id}",
            "BUSINESS_HOUR": "",
            "CLOSED_DAY": "연중무휴(전화문의)",
            "PROGRAM": [],
            "SHOP_INTRO_NEW_ONE": [],
            "SHOP_INTRO_NEW_TWO": "",
            "SHOP_INTRO_NEW_THREE": "",
        }

    # SHOP_INTRO
    intro_one   = p_text_array(root)                  # 모든 p 텍스트 배열
    intro_two   = intro_two_from_array(intro_one)     # "<br>" 조인
    intro_three = intro_three_from_array(intro_one)   # 특수문자-only 줄 → "<br></br>"

    # BUSINESS_HOUR
    business_hour = extract_business_hours_p_only(root) or ""

    # PROGRAM
    programs = extract_program_items(root)

    return {
        "SHOP_ID": f"N_{wr_id}",
        "BUSINESS_HOUR": business_hour,
        "CLOSED_DAY": "연중무휴(전화문의)",  # 하드코딩
        "PROGRAM": programs,
        "SHOP_INTRO_NEW_ONE": intro_one,
        "SHOP_INTRO_NEW_TWO": intro_two,
        "SHOP_INTRO_NEW_THREE": intro_three,
    }

# ============== 실행부 (멀티스레드 + 진행 인덱스 출력) ==============
def main():
    total = len(WR_ID_LIST)
    index_map = {wr_id: idx for idx, wr_id in enumerate(WR_ID_LIST)}
    results: List[Dict] = []

    done_counter = 0
    with ThreadPoolExecutor(max_workers=MAX_WORKERS) as ex:
        future_map = {ex.submit(process_wr_id, wr_id): wr_id for wr_id in WR_ID_LIST}
        for fut in as_completed(future_map):
            wr_id = future_map[fut]
            try:
                obj = fut.result()
            except Exception as e:
                print(f"[error] wr_id={wr_id} 처리 중 예외: {e}")
                obj = {
                    "SHOP_ID": f"N_{wr_id}",
                    "BUSINESS_HOUR": "",
                    "CLOSED_DAY": "연중무휴(전화문의)",
                    "PROGRAM": [],
                    "SHOP_INTRO_NEW_ONE": [],
                    "SHOP_INTRO_NEW_TWO": "",
                    "SHOP_INTRO_NEW_THREE": "",
                }
            results.append(obj)

            # ✅ 작업 끝날 때마다 인덱스 출력
            done_counter += 1
            print(f"[done] {done_counter}/{total} : N_{wr_id}")

    # 원래 WR_ID_LIST 순서대로 정렬
    results.sort(key=lambda r: index_map.get(r["SHOP_ID"].replace("N_", ""), 1e9))

    # CSV 저장
    save_to_csv(results, RESULT_CSV)

    # 콘솔에 간단 출력(원하면 주석 처리 가능)
    for r in results:
        print(json.dumps(r, ensure_ascii=False, indent=2))
        print()
    print(f"[ok] CSV 저장 완료: {RESULT_CSV}")

if __name__ == "__main__":
    main()
